import unittest
from unittest.mock import patch, MagicMock
import os
import sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from event_research.services.research import research_event, _generate_search_query


class TestResearch(unittest.TestCase):

    def setUp(self):
        self.test_event = {
            "title": "Test Event",
            "summary": "This is a test event for testing purposes"
        }

    @patch('event_research.services.research._tavily')
    @patch('event_research.services.research._generate_search_query')
    def test_research_event_success(self, mock_generate_query, mock_tavily):
        # Setup mocks
        mock_generate_query.return_value = "Test Event search query"
        
        # Mock Tavily search results
        mock_tavily.search.return_value = {
            "results": [
                {
                    "url": "https://example.com/1",
                    "content": "This is the first test result."
                },
                {
                    "url": "https://example.com/2",
                    "content": "This is the second test result."
                }
            ]
        }
        
        # Patch OpenAI completion call
        with patch('event_research.services.research._openai') as mock_openai:
            mock_message = MagicMock()
            mock_message.content = "Test article content generated by OpenAI."
            mock_response = MagicMock()
            mock_response.choices = [MagicMock(message=mock_message)]
            mock_openai.chat.completions.create.return_value = mock_response
            
            # Call the function
            result = research_event(self.test_event)
            
            # Assert results
            self.assertEqual(len(result["sources"]), 2)
            self.assertEqual(result["sources"][0], "https://example.com/1")
            self.assertEqual(result["sources"][1], "https://example.com/2")
            self.assertTrue("research" in result)
            self.assertEqual(result["research"], "Test article content generated by OpenAI.")
            
            # Verify calls
            mock_generate_query.assert_called_once_with(self.test_event["title"])
            mock_tavily.search.assert_called_once()
            mock_openai.chat.completions.create.assert_called_once()

    @patch('event_research.services.research._tavily')
    @patch('event_research.services.research._generate_search_query')
    def test_research_event_no_tavily_results(self, mock_generate_query, mock_tavily):
        # Setup mocks
        mock_generate_query.return_value = "Test Event search query"
        mock_tavily.search.return_value = {"results": []}
        
        # Call the function
        result = research_event(self.test_event)
        
        # Assert results - should return original event without changes
        self.assertEqual(result, self.test_event)
        self.assertFalse("research" in result)
        self.assertFalse("sources" in result)

    @patch('event_research.services.research._openai')
    def test_generate_search_query_success(self, mock_openai):
        # Setup mock
        mock_message = MagicMock()
        mock_message.content = "Test search query"
        mock_response = MagicMock()
        mock_response.choices = [MagicMock(message=mock_message)]
        mock_openai.chat.completions.create.return_value = mock_response
        
        # Call function
        result = _generate_search_query("Test Event")
        
        # Assert
        self.assertEqual(result, "Test search query")
        mock_openai.chat.completions.create.assert_called_once()

    @patch('event_research.services.research._openai')
    def test_generate_search_query_exception(self, mock_openai):
        # Setup mock to raise exception
        mock_openai.chat.completions.create.side_effect = Exception("API error")
        
        # Call function - should fallback to original title
        result = _generate_search_query("Test Event")
        
        # Assert
        self.assertEqual(result, "Test Event")
        mock_openai.chat.completions.create.assert_called_once()


if __name__ == '__main__':
    unittest.main() 